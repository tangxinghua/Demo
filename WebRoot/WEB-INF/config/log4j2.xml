<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出 -->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数 -->
<configuration status="WARN" monitorInterval="60">
	<Properties>
        <!-- 配置日志文件输出目录 -->
        <Property name="LOG_HOME">../logs/demo</Property>
    </Properties>

	<!--先定义所有的appender -->
	<Appenders>
		<!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </Console>
        
		<!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
		<!-- ① fileName，String，指定写入的log文件的名称。 ② append，boolean，指定是否是追加写入（append=true，默认情况），还是覆盖写入（append=false）。 
			③ bufferedIO，boolean，是否对数据进行缓冲到缓冲区满后再写入。测试显示，即使在启用immediateFlush的情况下，设置bufferedIO=true也能提高性能。 
			④ locking，boolean，是否对文件上锁，当有多个线程可能同时写该文件时需要考虑上锁 -->
		<File name="testLog" fileName="${LOG_HOME}/test.log" append="false">
			<PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n" />
		</File>
		
         <!--
                %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
                %p : 日志输出格式
                %c : logger的名称
                %m : 日志内容，即 logger.info("message")
                %n : 换行符
                %C : Java类名
                %L : 日志输出所在行数
                %M : 日志输出所在方法名
                hostName : 本地机器名
                hostAddress : 本地ip地址
             -->

		<!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingRandomAccessFile name="RollingFileInfo" fileName="${LOG_HOME}/info.log"
			filePattern="${LOG_HOME}/backup/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.gz" 
			immediateFlush="false" bufferedIO="true" bufferSize="512"> <!-- 此处设置了缓存输出到日志文件 -->
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY" />
			<PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] %-5level %class{36} %L %M -- %msg%xEx%n" />
			<Policies>
				<!-- interval属性用来指定多久滚动一次，默认是1 hour,
					modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am -->
				<TimeBasedTriggeringPolicy interval="2" modulate="true" />
				<!-- size属性用来定义每个日志文件的大小 -->
				<SizeBasedTriggeringPolicy size="10 MB" />
			</Policies>
			<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
			<DefaultRolloverStrategy max="20" />
		</RollingRandomAccessFile>
		<RollingRandomAccessFile name="RollingFileWarn" fileName="${LOG_HOME}/warn.log"
			filePattern="${LOG_HOME}/backup/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log.gz">
			<ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY" />
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n" />
			<Policies>
				<TimeBasedTriggeringPolicy />
				<SizeBasedTriggeringPolicy size="10 MB" />
			</Policies>
		</RollingRandomAccessFile>
		<RollingRandomAccessFile name="RollingFileError" fileName="${LOG_HOME}/error.log"
			filePattern="${LOG_HOME}/backup/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.gz">
			<ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY" />
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n" />
			<Policies>
				<TimeBasedTriggeringPolicy />
				<SizeBasedTriggeringPolicy size="10 MB" />
			</Policies>
		</RollingRandomAccessFile>
	</Appenders>
	
	<!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
	<loggers>
        <!-- 配置日志的根节点 -->
        <root level="all">
            <appender-ref ref="Console"/>
        </root>

        <!-- 第三方日志系统，过滤掉spring和mybatis的一些无用的DEBUG信息 -->
        <logger name="org.springframework" level="info"/>
        <logger name="org.apache.http" level="warn"/>

        <!-- 日志实例(debug),其中'service-log'继承root,但是root将日志输出控制台,而'service-log'将日志输出到文件,
        	通过属性'additivity="false"'将'service-log'的的日志不再输出到控制台,只在自定义的Appender中进行输出 -->
        <logger name="test_log" level="info" includeLocation="true" additivity="true">
            <appender-ref ref="testLog"/>
        </logger>

        <!-- 日志实例(info) -->
        <logger name="com.demo.test" level="debug" includeLocation="true" additivity="true">
			<appender-ref ref="RollingFileInfo" />
			<appender-ref ref="RollingFileWarn" />
			<appender-ref ref="RollingFileError" />
        </logger>
    </loggers>
</configuration>